

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  title, couponCode, expiryDate
model Coupon{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  couponCode String
  expiryDate DateTime
  isActive Boolean
	createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  link String
  imageUrl String
  isActive Boolean
  products  Product[]
  
	createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//관계

// 1대 1 관계 Realationship User => Profile Relation
// 1대 다 관계 => Category => Product Relation
// 다대 다 관계

model Category {
   id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  imageUrl  String?
  description String?   
  isActive Boolean
  products  Product[]  
  trainings  Training[]  

  marketIds String[] @db.ObjectId
  markets   Market[]   @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  // name        String     @unique
  title String
  slug       String @unique
  logoUrl  String?
  description String?   
  isActive Boolean
  
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Product { 
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  slug       String    @unique
  imageUrl String?
  description String?
  isActive Boolean
  isWholesale Boolean
  sku      String?
  barcode  String?
  productCode  String?
  unit  String?
  productPrice Float
  salePrice Float
  wholesalePrice Float
  wholesaleQty Int
  productStock Int
  qty Int
  tags      String[]
  
    banner         Banner?   @relation(fields: [bannerId], references: [id]) // Banner와의 관계 설정
  bannerId       String?   @db.ObjectId // Optional로 설정 (Product가 반드시 Banner에 연결될 필요는 없음)

  category   Category  @relation(fields: [categoryId], references: [id],onDelete:Cascade,onUpdate:Cascade)
  categoryId String @db.ObjectId
  user User @relation(fields: [userId],references: [id],onDelete:Cascade,onUpdate:Cascade)
  userId String 
  

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}


model Training {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  slug       String    @unique
  imageUrl String?
  description String?
  content String?
  isActive Boolean

  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

enum UserRole{
  ADMIN
  USER
  FARMER
  MODERATOR
}
enum Gender{
  MALE
  FEMALE
}

model User{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  password String
  emailVerfied DateTime?

  products Product[]

  role UserRole @default(USER)

  farmerProfile FarmerProfile?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}


model FarmerProfile{ 
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  code String
  contactPerson String?
  contactPersonPhone String?
  profileImageUrl String?
  email String
  name String
  notes String?
  phone String
  physicalAddress String?
  terms String?
  isActive Boolean
  products String[]
  landSize Float
  mainCrop String

  user User @relation(fields: [userId],references: [id],onDelete:Cascade,onUpdate:Cascade)
  userId String @db.ObjectId @unique

	createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
// ADMIN TEACHER PARENT STUDENT

